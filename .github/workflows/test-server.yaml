---
# This workflow tests the HMI Server

name: Server Tests

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the $default-branch branch
  push:
    #branches: ["main"]
    #paths:
    #  - "packages/server/**"
  pull_request:
    #branches: ["main"]
    #paths:
    #  - "packages/server/**"
  # Allow for triggering from other workflows
  workflow_call:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  server-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Service containers to run with this job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14.1-alpine
        # Env Variables
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
          POSTGRES_DB: "terarium"
        ports:
          - 5430:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - terarium-db:/var/lib/postgresql/data
          - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      db-migration:
        container_name: db-migration
        image: ghcr.io/darpa-askem/db-migration:latest
        networks:
          - terarium
        environment:
          SPRING_PROFILES_ACTIVE: "default, local-docker"
          TERARIUM_DB_PASSWORD: "postgres"
          TERARIUM_DB_USERNAME: "postgres"
        depends_on:
          postgres:
            condition: service_healthy

      keycloak:
        image: ghcr.io/unchartedsoftware/keycloak:22.0.3.0
        networks:
          - terarium
        restart: always
        healthcheck:
          # Keycloak no longer has curl, https://stackoverflow.com/questions/58168955/testing-minimal-docker-containers-with-healthcheck/76790330#76790330
          test:
            [
              "CMD-SHELL",
              "exec 3<>/dev/tcp/127.0.0.1/8081;echo -e \"GET /health/ready HTTP/1.1\r

                host: http://localhost\r

                Connection: close\r

                \r

                \" >&3;grep \"HTTP/1.1 200 OK\" <&3"
            ]
          interval: '3s'
          timeout: '3s'
          retries: 30
        command: [ 'start-dev', '--http-port=8081' ]
        environment:
          KC_DB: 'postgres'
          KC_DB_URL: 'jdbc:postgresql://postgres/postgres'
          KC_DB_URL_HOST: 'postgres'
          KC_DB_USERNAME: 'postgres'
          KC_DB_PASSWORD: 'postgres'
          PROXY_ADDRESS_FORWARDING: 'true'
          KEYCLOAK_ADMIN: 'admin'
          KEYCLOAK_ADMIN_PASSWORD: 'admin123'
          KC_HOSTNAME: 'keycloak'
          KC_HOSTNAME_PORT: '8081'
          KC_HOSTNAME_ADMIN_URL: 'http://keycloak:8081'
          KC_HTTP_ENABLED: 'true'
          KC_HOSTNAME_STRICT: 'false'
          KC_HOSTNAME_STRICT_HTTPS: 'false'
        depends_on:
          keycloak-init:
            condition: service_completed_successfully
          postgres:
            condition: service_healthy
        volumes:
          - ./scripts/realm/:/data/
        ports:
          - '8081:8081'

      keycloak-init:
        image: ghcr.io/unchartedsoftware/keycloak:22.0.3.0
        networks:
          - terarium
        command: [ 'import', '--dir', '/data', '--override', 'true' ]
        volumes:
          - ./scripts/realm:/data
        environment:
          KC_DB: 'postgres'
          KC_DB_URL: 'jdbc:postgresql://postgres/postgres'
          KC_DB_USERNAME: 'postgres'
          KC_DB_PASSWORD: 'postgres'
          KEYCLOAK_ADMIN: 'admin'
          KEYCLOAK_ADMIN_PASSWORD: 'admin123'
        depends_on:
          postgres:
            condition: service_healthy

      redis:
        # Docker Hub image
        image: redis:7-alpine
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: quay.io/minio/minio:RELEASE.2023-11-15T20-43-25Z
        command: [ "server", "/data", "--console-address", ":9090" ]
        healthcheck:
          test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
          interval: "3s"
          timeout: "3s"
          retries: 30
        ports:
          - "9000:9000"
          - "9090:9090"
        networks:
          - terarium
        environment:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: admin123
        volumes:
          - minio-data:/data
      neo4j:
        container_name: neo4j
        image: neo4j:5.12-community
        healthcheck:
          test: wget http://127.0.0.1:7474 || exit 1
          interval: 1s
          timeout: 10s
          retries: 20
          start_period: 3s
        networks:
          - terarium
        ports:
          - "7474:7474"
          - "7687:7687"
        environment:
          - NEO4J_PLUGINS=["apoc"]
          - apoc.import.file.enabled=true
          - NEO4J_AUTH=none
          - NEO4J_dbms_memory_pagecache_size=512M
          - PG_HOST=postgres
          - PG_PORT=5432
        depends_on:
          - postgres

      rabbitmq:
        # Docker Hub image
        image: rabbitmq:3.9-alpine
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: "terarium"
          RABBITMQ_DEFAULT_PASS: "terarium123"
          RABBITMQ_MANAGEMENT_ENABLED: "true"
        # Set health checks to wait until rabbitmq has started
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        container_name: elasticsearch
        image: elasticsearch:8.7.0
        networks:
          - terarium
        ports:
          - "9200:9200"
          - "9300:9300"
        healthcheck:
          test:
            [
              "CMD",
              "curl",
              "--head",
              "0.0.0.0:9200/_cluster/health?wait_for_status=yellow"
            ]
          interval: "3s"
          timeout: "3s"
          retries: 30
        environment:
          - cluster.name=elasticsearch
          - discovery.type=single-node
          - bootstrap.memory_lock=true
          - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
          - xpack.security.enabled=false
        ulimits:
          memlock:
            soft: -1
            hard: -1
        volumes:
          - elasticsearch-data:/usr/share/elasticsearch/data

      spicedb:
        container_name: spicedb
        image: authzed/spicedb:v1.28.0
        networks:
          - terarium
        ports:
          - "50051:50051"
        command: [ "serve" ]
        environment:
          SPICEDB_GRPC_PRESHARED_KEY: "dev"
          SPICEDB_DATASTORE_ENGINE: "postgres"
          SPICEDB_HTTP_ENABLED: "true"
          SPICEDB_DATASTORE_CONN_URI: "postgres://terarium_user:terarium@postgres:5432/spicedb?sslmode=disable"
        healthcheck:
          test: [ "CMD", "grpc_health_probe", "-addr=:50051" ]
          interval: "3s"
          timeout: "3s"
          retries: 30
        depends_on:
          migrate-spicedb:
            condition: service_completed_successfully

      migrate-spicedb:
        image: authzed/spicedb:v1.28.0
        networks:
          - terarium
        command: [ "migrate", "head" ]
        restart: "on-failure"
        environment:
          SPICEDB_DATASTORE_ENGINE: "postgres"
          SPICEDB_DATASTORE_CONN_URI: "postgres://terarium_user:terarium@postgres:5432/spicedb?sslmode=disable"
        depends_on:
          postgres:
            condition: service_healthy

    permissions:
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Validate Gradle JAR
      - name: Validate GradleW JAR
        uses: gradle/wrapper-validation-action@342dbebe7272035434f9baccc29a816ec6dd2c7b

      # Setup Java
      - name: Setup Java v17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      # Run the tests
      - name: Run tests
        uses: gradle/gradle-build-action@5516b399405349a7d56e45a78a0bd4b3eaa62f9e
        with:
          gradle-version: wrapper
          build-root-directory: packages/server
          arguments: |
            test
            --info
