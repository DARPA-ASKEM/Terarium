<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:15:50.556Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:15:50.557Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:15:50.558Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:15:50.558Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:15:50.559Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:15:50.559Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:15:50.559Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="2" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0.001">
            <system-out>
1/2 \frac{1}{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated*NPI_mult*S_unvaccinated*beta/N" time="0">
            <system-out>
I_unvaccinated*NPI_mult*S_unvaccinated*beta/N I_{unvaccinated}*NPI_{mult}*S_{unvaccinated}*\frac{beta}{N}

            </system-out>
            <failure message="expected &apos;I_{unvaccinated}*NPI_{mult}*S_{unvacc…&apos; to deeply equal &apos;I_{unvaccinated}*NPI_{mult}*S_{unvacc…&apos;" type="AssertionError">
AssertionError: expected &apos;I_{unvaccinated}*NPI_{mult}*S_{unvacc…&apos; to deeply equal &apos;I_{unvaccinated}*NPI_{mult}*S_{unvacc…&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:37:17
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:15:50.560Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:15:50.561Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:15:50.561Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:15:50.561Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:16:15.034Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:16:15.035Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:16:15.035Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:16:15.036Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:16:15.037Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:16:15.037Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:16:15.037Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:16:15.037Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:16:15.037Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:16:15.038Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:16:15.038Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
            <system-out>
1/2 \frac{1}{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:21:36.366Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:21:36.367Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:21:36.367Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:21:36.368Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:21:36.369Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:21:36.369Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:21:36.369Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:21:36.369Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:21:36.369Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:21:36.370Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:21:36.370Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:23:29.529Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:23:29.531Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:23:29.531Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:23:29.531Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:23:29.532Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:23:29.532Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:23:29.532Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:23:29.533Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:23:29.533Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:23:29.533Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:23:29.533Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="2" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
            <system-out>
1/2 \frac{1}{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated*NPI_mult*S_unvaccinated*beta/N" time="0">
            <system-out>
I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N I_{unvaccinated}^{2}*NPI_{mult}*S_{unvaccinated}*\frac{beta}{N}

            </system-out>
            <failure message="expected &apos;I_{unvaccinated}^{2}*NPI_{mult}*S_{un…&apos; to deeply equal &apos;I_{unvaccinated}*NPI_{mult}*S_{unvacc…&apos;" type="AssertionError">
AssertionError: expected &apos;I_{unvaccinated}^{2}*NPI_{mult}*S_{un…&apos; to deeply equal &apos;I_{unvaccinated}*NPI_{mult}*S_{unvacc…&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:37:17
            </failure>
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:25:52.445Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:25:52.446Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:25:52.447Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:25:52.447Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:25:52.448Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:25:52.448Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:25:52.448Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:25:52.449Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:25:52.449Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:25:52.449Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:25:52.449Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
            <system-out>
1/2 \frac{1}{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated*NPI_mult*S_unvaccinated*beta/N" time="0">
            <system-out>
I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N I_{unvaccinated}^{2}*NPI_{mult}*S_{unvaccinated}*\frac{beta}{N}

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:26:10.881Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:26:10.882Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:26:10.883Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:26:10.883Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:26:10.884Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:26:10.884Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:26:10.884Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:26:10.885Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:26:10.885Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:26:10.885Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:26:10.885Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:34:48.268Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:34:48.269Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:34:48.269Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:34:48.270Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:34:48.270Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:34:48.271Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:34:48.271Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:34:48.271Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:34:48.271Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:34:48.272Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:34:48.272Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\\y x\\y

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:34:55.627Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:34:55.628Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:34:55.628Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:34:55.629Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:34:55.629Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:34:55.630Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:34:55.630Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:34:55.630Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:34:55.630Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:34:55.630Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:34:55.631Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\\y x\\y

            </system-out>
            <failure message="expected &apos;x\\y&apos; to deeply equal &apos;x\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\\y&apos; to deeply equal &apos;x\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:36:29.296Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:36:29.297Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:36:29.297Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:36:29.298Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:36:29.298Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:36:29.299Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:36:29.299Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:36:29.299Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:36:29.299Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:36:29.299Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:36:29.300Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.002">
            <system-out>
x\\y x\\y

            </system-out>
            <failure message="expected &apos;x\\y&apos; to deeply equal &apos;x\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\\y&apos; to deeply equal &apos;x\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0.001">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:36:49.053Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:36:49.055Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:36:49.055Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:36:49.055Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:36:49.056Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:36:49.056Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:36:49.056Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:36:49.057Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:36:49.057Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:36:49.057Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:36:49.057Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\\y x\\y

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
            <system-out>
1/2 \frac{1}{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:37:45.086Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:37:45.088Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:37:45.088Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:37:45.088Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:37:45.089Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:37:45.089Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:37:45.089Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:37:45.090Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:37:45.090Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:37:45.090Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:37:45.090Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\y x\y

            </system-out>
            <failure message="expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;" type="AssertionError">
AssertionError: expected &apos;x\y&apos; to deeply equal &apos;x\\y&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:9:17
            </failure>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0.001">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:47:43.683Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:47:43.684Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:47:43.684Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:47:43.685Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:47:43.685Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:47:43.686Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:47:43.686Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:47:43.686Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:47:43.686Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:47:43.687Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:47:43.687Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\\y x\\y

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:47:51.838Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:47:51.840Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:47:51.840Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:47:51.840Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:47:51.841Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:47:51.841Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:47:51.841Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:47:51.842Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:47:51.842Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:47:51.842Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:47:51.842Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\y x\y

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:49:16.673Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:49:16.674Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:49:16.674Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:49:16.674Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:49:16.675Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:49:16.675Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:49:16.676Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:49:16.676Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:49:16.676Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:49:16.676Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:49:16.677Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="1" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\y x\y

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0.001">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
            <system-out>
1/2 \frac{1}{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0.001">
            <system-out>
I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N I_{unvaccinated}^{2} NPI_{mult} S_{unvaccinated} \frac{beta}{N}

            </system-out>
            <failure message="expected &apos;I_{unvaccinated}^{2} NPI_{mult} S_{un…&apos; to deeply equal &apos;I_{unvaccinated}^{2}*NPI_{mult}*S_{un…&apos;" type="AssertionError">
AssertionError: expected &apos;I_{unvaccinated}^{2} NPI_{mult} S_{un…&apos; to deeply equal &apos;I_{unvaccinated}^{2}*NPI_{mult}*S_{un…&apos;
 ❯ tests/unit/services/string-to-latex-expression.spec.ts:37:17
            </failure>
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:49:46.676Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:49:46.677Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:49:46.678Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:49:46.678Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:49:46.679Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:49:46.679Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:49:46.679Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:49:46.680Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:49:46.680Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:49:46.680Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:49:46.680Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
            <system-out>
x\y x\y

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
            <system-out>
x_variable x_{variable}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
            <system-out>
x^2 x^{2}

            </system-out>
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0.001">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="tests/unit/utils/number.spec.ts" timestamp="2024-07-23T15:50:23.895Z" hostname="Shawns-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.018">
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large positive exponents" time="0.016">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert very large negative exponents" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return the original string for non-exponential numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert zero exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; exponentialToNumber &gt; should correctly convert one exponent" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; numberToNist &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly convert negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should return &quot;NaN&quot; for non-numeric strings" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; nistToNumber &gt; should correctly handle multiple spaces between groups" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format large numbers using scientific notation" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers without a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with a decimal part" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format numbers with leading zeros" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should correctly format negative numbers" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/number.spec.ts" name="number util tests &gt; displayNumber &gt; should return &quot;&quot; for non-numeric strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/pivot.spec.ts" timestamp="2024-07-23T15:50:23.896Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; square pivot table" time="0.005">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with identity pattern" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot with non-identity pattern" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/pivot.spec.ts" name="pivot table tests &gt; 2D pivot short form" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/api/api.spec.ts" timestamp="2024-07-23T15:50:23.896Z" hostname="Shawns-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="9.017">
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling immediate" time="0.002">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling several times and return data" time="3.006">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling exceeds threshold" time="3.004">
        </testcase>
        <testcase classname="tests/unit/api/api.spec.ts" name="API utilities test &gt; polling can be cancelled" time="3.005">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/workflow.spec.ts" timestamp="2024-07-23T15:50:23.896Z" hostname="Shawns-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.006">
        <testcase classname="tests/unit/services/workflow.spec.ts" name="basic tests to make sure it all works &gt; simple workflow test (1 + 2) + (3 + 4)" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 1" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states unsynced 2" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="operator state sync/staleness check &gt; states synced" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate linear flow" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate tail operator" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch -&lt; fork &gt; bad duplication" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; bootstrapped workflow programmatically" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow copying branch &gt;- fork &gt; duplicate at fork" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; dataset" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; model" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; dataset|model =&gt; test" time="0">
        </testcase>
        <testcase classname="tests/unit/services/workflow.spec.ts" name="workflow operator with multiple output types &gt; edge case many to many" time="0">
            <system-err>
Ambiguous matching types [datasetId,modelId] to [modelId,datasetId,number]

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/model-representation/petrinet/mira.spec.ts" timestamp="2024-07-23T15:50:23.897Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira parameters" time="0.004">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; parse mira templates" time="0.001">
        </testcase>
        <testcase classname="tests/unit/model-representation/petrinet/mira.spec.ts" name="mira MMT &gt; matrix test 123" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/chart.spec.ts" timestamp="2024-07-23T15:50:23.897Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with 1 value" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/chart.spec.ts" name="chart util tests &gt; should correctly format success chart data with all the same values" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/operator-bitmask.spec.ts" timestamp="2024-07-23T15:50:23.898Z" hostname="Shawns-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add hover state" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; add drag state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if hover state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; check if drag state is on" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove hover state" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/operator-bitmask.spec.ts" name="test bitmasking for different interaction in the workflow UI &gt; remove drag state" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/emitter.spec.ts" timestamp="2024-07-23T15:50:23.898Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; general emit" time="0.002">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; once emit" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/emitter.spec.ts" name="event emitter &gt; off emit" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/data-util.spec.ts" timestamp="2024-07-23T15:50:23.898Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name" time="0.001">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; gets pdf url name with params" time="0">
        </testcase>
        <testcase classname="tests/unit/utils/data-util.spec.ts" name="data util tests &gt; returns null on bad url" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/basic.spec.ts" timestamp="2024-07-23T15:50:23.899Z" hostname="Shawns-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should have the correct square root" time="0">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should sum up to 2" time="0.001">
        </testcase>
        <testcase classname="tests/unit/basic.spec.ts" name="basic tests to make sure it all works &gt; should generate and match snapshot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/services/string-to-latex-expression.spec.ts" timestamp="2024-07-23T15:50:23.899Z" hostname="Shawns-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should escape backslashes in the expression" time="0.001">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should wrap variables after underscores in {} and escape subsequent underscores" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should convert ^ to LaTeX superscript notation" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should detect and convert fractions a/b to \frac{a}{b}" time="0">
        </testcase>
        <testcase classname="tests/unit/services/string-to-latex-expression.spec.ts" name="stringToLatexExpression &gt; should handle the expression I_unvaccinated^2*NPI_mult*S_unvaccinated*beta/N" time="0">
        </testcase>
    </testsuite>
</testsuites>
